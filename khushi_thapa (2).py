# -*- coding: utf-8 -*-
"""Khushi Thapa

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/135VTgdfw43wrEg57PrJB2xDzcnmAH_ZE

# **Women Cloth Reviews Prediction with Multi Nomial Naive Bayes**

# **Objective:**
To predict the sentiment (positive/negative) of women's clothing reviews using a machine learning model.

# **Data Source:**
You can use the "Women's E-Commerce Clothing Reviews" dataset from Kaggle, which includes over 23,000 reviews along with features like review text, rating, and customer recommendation.

# Import Library
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""# Import Dataset"""

from google.colab import files
uploaded = files.upload()

df = pd.read_csv(r'women_Clothing_E-Commerce_Reviews.CSV')

df.head()

df.info()

df.shape

"""# Missing Values

Remove missing values in Reviews columns with No Review text.
"""

df.isna().sum()

df[df['Review Text']==""]=np.NaN

df['Review Text'].fillna("No Review",inplace=True)

df.isna().sum()

print(df.columns)

df['Review Text']

"""# Define Target(Y) and Feature(X)"""

df.columns

x=df['Review Text']

y=df['Rating']

df['Rating'].value_counts()

"""# Train Test Split"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.7, stratify=y,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""# Get Feature Text Conversion to Tokens"""

from sklearn.feature_extraction.text import CountVectorizer

cv=CountVectorizer(lowercase = True, analyzer='word',ngram_range=(2,3),stop_words='english' , max_features=5000)

x_train=cv.fit_transform(x_train)

cv.get_feature_names_out()

x_train.toarray()

x_test = cv.fit_transform(x_test)

cv.get_feature_names_out()

x_test.toarray()

"""# Get MOdel Train"""

from sklearn.naive_bayes import MultinomialNB

model=MultinomialNB()

model.fit(x_train,y_train)

"""# Get Model Prediction"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

"""# Get Probability of Each Predicted Class"""

model.predict_proba(x_test)

"""# Get Model Evalution"""

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""# Recategories Ratings as Poor (0) and Good (1)"""

df['Rating'].value_counts()

"""Re-Rating as 1,2,3 as 0 and 4,5 as 1"""

df.replace({'Rating':{1:0,2:0,3:0,4:1,5:1}},inplace=True)

y=df['Rating']

"""# Train Test Split"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.7,stratify=y,random_state=2529)

x_train.shape, x_test.shape,y_train.shape,y_test.shape

"""# Get Feature Text Conversion to Tokens"""

from sklearn.feature_extraction.text import CountVectorizer

cv= CountVectorizer(lowercase=True, analyzer='word', ngram_range=(2,3), stop_words='english', max_features=5000)

x_train=cv.fit_transform(x_train)

x_test=cv.fit_transform(x_test)

"""# Get Model Re-train"""

from sklearn.naive_bayes import MultinomialNB

model=MultinomialNB()

model.fit(x_train,y_train)

"""# Get Model Prediction"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

"""## Get Model Evalution"""

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""# Explaination

In this project, I aimed to predict the sentiment (positive or negative) of women's clothing reviews using the Multinomial Naive Bayes algorithm. I used the "Women's E-Commerce Clothing Reviews" dataset, focusing on the review text as the feature and ratings as the target. The ratings were re-categorized: ratings 1, 2, 3 as negative (0), and 4, 5 as positive (1). After splitting the data into training and testing sets, I applied CountVectorizer to tokenize the review text and trained the Naive Bayes model. The model achieved a 70% accuracy, performing better on positive reviews than on negative ones.
"""